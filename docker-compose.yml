version: '3.8'

services:
  # Redis cache for sessions and query caching
  redis:
    image: redis:7-alpine
    container_name: ai-monitoring-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --save 60 1
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-monitoring

  # FastAPI backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-monitoring-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4-turbo-preview}
      - PROMETHEUS_URL=${PROMETHEUS_URL:-http://host.docker.internal:9090}
      - GRAFANA_URL=${GRAFANA_URL:-http://host.docker.internal:3000}
      - ALERTMANAGER_URL=${ALERTMANAGER_URL:-http://host.docker.internal:9093}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-200}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
      - JWT_SECRET=${JWT_SECRET}
      - ENABLE_AZURE_MONITOR=${ENABLE_AZURE_MONITOR:-false}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_WORKSPACE_ID=${AZURE_WORKSPACE_ID}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    networks:
      - ai-monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
        - REACT_APP_TITLE=${APP_TITLE:-AI Monitoring Agent}
        - REACT_APP_DESCRIPTION=${APP_DESCRIPTION:-Conversational Monitoring Interface}
    container_name: ai-monitoring-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_TITLE=${APP_TITLE:-AI Monitoring Agent}
      - REACT_APP_DESCRIPTION=${APP_DESCRIPTION:-Conversational Monitoring Interface}
    depends_on:
      - backend
    networks:
      - ai-monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Prometheus for testing (uncomment if you don't have one)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: ai-monitoring-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - ai-monitoring

  # Optional: Grafana for testing (uncomment if you don't have one)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: ai-monitoring-grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - ai-monitoring

volumes:
  redis_data:
    driver: local
  backend_cache:
    driver: local
  # grafana_data:
  #   driver: local

networks:
  ai-monitoring:
    driver: bridge
    name: ai-monitoring-network